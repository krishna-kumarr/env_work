name: Generate and Use Env File

on:
  push:
    branches: [main, dev]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  actions: write

jobs:
  generate-env:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'main' || github.ref_name == 'dev' && 'dev' || '' }}

    outputs:
      branch: ${{ steps.set-branch.outputs.branch }}
      
    steps:
      - uses: actions/checkout@v3

      - name: Set BRANCH variable
        id: set-branch
        run: |
          echo "GITHUB EVENT INPUT BRANCH: ${{ github.event.inputs.branch }}"
          echo "GITHUB REF NAME: ${{ github.ref_name }}"
          if [ -n "${{ github.event.inputs.branch }}" ]; then
            echo "branch=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
          else
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Create env file from current environment
        id: create-env
        run: |
          BRANCH=${{ steps.set-branch.outputs.branch }}
          echo "Using branch: $BRANCH"
          if [[ "$BRANCH" == "main" ]]; then
            ENV_FILE=".env.production"
          elif [[ "$BRANCH" == "dev" ]]; then
            ENV_FILE=".env.local"
          else
            echo "Unsupported branch: $BRANCH"
            exit 1
          fi
          echo "Creating $ENV_FILE from environment variables"
          printenv | grep -v '^PWD=' | grep -v '^HOME=' | grep -v '^RUNNER_' > "$ENV_FILE"
          echo "envfile=$ENV_FILE" >> $GITHUB_OUTPUT
          echo "Created:"
          cat "$ENV_FILE"

      - name: Upload env artifact
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: env-file-${{ steps.set-branch.outputs.branch }}
          path: ${{ steps.create-env.outputs.envfile }}

      - name: Set GitHub Environment Secrets from env file (only new secrets)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            set -e
            ENV_FILE="${{ steps.create-env.outputs.envfile }}"
            ENV_NAME="${{ steps.set-branch.outputs.branch }}"
  
            echo "Reading secrets from $ENV_FILE to update environment: $ENV_NAME"
  
            # List existing secrets in the target environment
            existing_secrets=$(gh secret list --env "$ENV_NAME" --json name -q '.[].name' || echo "[]")
            readarray -t existing_secrets_array <<<"$existing_secrets"
  
            # Function to check if array contains an element
            contains() {
              local e match="$1"
              shift
              for e; do [[ "$e" == "$match" ]] && return 0; done
              return 1
            }
  
            while IFS='=' read -r key value; do
              key=$(echo "$key" | xargs)
              value=$(echo "$value" | xargs)
  
              # Skip empty lines or comments
              if [[ -z "$key" ]] || [[ "$key" == \#* ]]; then
                continue
              fi
  
              if [[ -n "$key" && -n "$value" ]]; then
                if contains "$key" "${existing_secrets_array[@]}"; then
                  echo "Secret '$key' already exists in environment '$ENV_NAME' - skipping update."
                else
                  echo "Creating new secret '$key' in environment '$ENV_NAME'."
                  echo "$value" | gh secret set "$key" --env "$ENV_NAME"
                fi
              fi
            done < "$ENV_FILE"
  