name: Sync Local Env to GitHub Environment and Recreate Env File

on:
  push:
    branches: [main, dev]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  actions: write

jobs:
  sync-env:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'main' || github.ref_name == 'dev' && 'dev' || '' }}

    steps:
      - uses: actions/checkout@v3

      - name: Set BRANCH variable
        id: set-branch
        run: |
          if [ -n "${{ github.event.inputs.branch }}" ]; then
            echo "branch=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
          else
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Load local env file and update GitHub Environment secrets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH="${{ steps.set-branch.outputs.branch }}"

          # Determine which local .env file to use
          if [[ "$BRANCH" == "main" ]]; then
            ENV_FILE=".env.production"
          elif [[ "$BRANCH" == "dev" ]]; then
            ENV_FILE=".env.local"
          else
            echo "Unsupported branch: $BRANCH"
            exit 1
          fi

          # Check file exists
          if [ ! -f "$ENV_FILE" ]; then
            echo "$ENV_FILE not found"
            exit 1
          fi

          echo "Updating GitHub Environment '$BRANCH' with secrets from $ENV_FILE..."

          while IFS='=' read -r key value; do
            key=$(echo "$key" | xargs)
            value=$(echo "$value" | xargs)

            if [[ -z "$key" || "$key" == \#* ]]; then
              continue
            fi

            echo "Setting secret: $key"
            echo "$value" | gh secret set "$key" --env "$BRANCH"
          done < "$ENV_FILE"

      - name: Recreate clean .env file from local environment (based on updated secrets)
        run: |
          BRANCH="${{ steps.set-branch.outputs.branch }}"
          if [[ "$BRANCH" == "main" ]]; then
            OUTPUT_ENV=".env.production"
          else
            OUTPUT_ENV=".env.local"
          fi

          # Create new .env file from actual environment (excluding runner variables)
          printenv | grep -v -E '^(PWD|HOME|RUNNER_|GITHUB_|CI|PATH|SHELL|USER|UID|LOGNAME|TERM|LANG|SHLVL|_)=.*' > "$OUTPUT_ENV"

          echo "Final $OUTPUT_ENV created:"
          cat "$OUTPUT_ENV"

      - name: Upload final .env file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: env-file-${{ steps.set-branch.outputs.branch }}
          path: .env.${{ steps.set-branch.outputs.branch }}
