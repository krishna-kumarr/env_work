name: Generate and Use Env File

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to generate env for'
        required: false
        default: ''

jobs:
  generate-env:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'main' || github.ref_name == 'dev' && 'dev' || '' }}

    outputs:
      branch: ${{ steps.set-branch.outputs.branch }}
      
    steps:
      - uses: actions/checkout@v3

      - name: Set BRANCH variable
        id: set-branch
        run: |
          if [ -n "${{ github.event.inputs.branch }}" ]; then
            echo "branch=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
          else
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Debug branch
        run: |
          echo "Detected branch: ${{ steps.set-branch.outputs.branch }}"

      - name: Create env file
        run: |
          if [ "${{ steps.set-branch.outputs.branch }}" = "main" ]; then
            echo "API_KEY=${{ secrets.API_KEY }}" | tee .env.production
          elif [ "${{ steps.set-branch.outputs.branch }}" = "dev" ]; then
            echo "API_KEY=${{ secrets.API_KEY }}" | tee .env.local
          else
            echo "Unsupported branch: ${{ steps.set-branch.outputs.branch }}"
            exit 1
          fi 

          if [ -f .env.production ]; then chmod 600 .env.production; fi
          if [ -f .env.local ]; then chmod 600 .env.local; fi

      - name: Show env file content
        run: |
          if [ -f .env.production ]; then
           echo ".env.production contents:"
           cat .env.production
          fi

          if [ -f .env.local ]; then
           echo ".env.local contents:"
           cat .env.local
          fi

      - name: Show current directory
        run: pwd

      - name: Set artifact path
        id: set-path 
        run: |
          if [[ "${{ steps.set-branch.outputs.branch }}" == "main" ]]; then
            echo "path=.env.production" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.set-branch.outputs.branch }}" == "dev" ]]; then
            echo "path=.env.local" >> $GITHUB_OUTPUT
          else
            echo "Unsupported branch: ${{ steps.set-branch.outputs.branch }}"
            exit 1
          fi

      - name: Check if env file exists
        run: |
          if [ -f "${{ steps.set-path.outputs.path }}" ]; then
            echo "File '${{ steps.set-path.outputs.path }}' exists."
          else
            echo "File '${{ steps.set-path.outputs.path }}' does NOT exist."
            exit 1  # fail the job if file doesn't exist
          fi

      - name: Confirm file to upload
        run: |
          echo "Uploading file from path: '${{ steps.set-path.outputs.path }}'"
          ls -la "${{ steps.set-path.outputs.path }}"

      - name: Detect env file
        id: detect-env
        run: |
         if [ -f .env.production ]; then
          echo "envfile=.env.production" >> $GITHUB_OUTPUT
         elif [ -f .env.local ]; then
          echo "envfile=.env.local" >> $GITHUB_OUTPUT
         else
          echo "No .env.* file found."
          echo "envfile=" >> $GITHUB_OUTPUT
         fi
        
      - name: Upload env artifact
        uses: actions/upload-artifact@v4
        with:
          name: env-file
          path: ${{ github.workspace }}/.env.production
          if-no-files-found: warn
  # use-env:
  #   needs: generate-env
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download env artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: env-file-${{ needs.generate-env.outputs.branch }}
  #         path: ./envfiles

  #     - name: List downloaded files
  #       run: ls -la ./envfiles

  #     - name: Show env file content
  #       run: cat ./envfiles/*
